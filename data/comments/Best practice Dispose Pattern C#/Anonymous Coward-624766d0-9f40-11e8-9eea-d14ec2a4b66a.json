{"_id":"624766d0-9f40-11e8-9eea-d14ec2a4b66a","name":"Anonymous Coward","email":"","body":"Although I had similar thoughts in templatizing out the Dispose(bool) method, the problem is that implementing it like this enforces that managed resources from the entire class hierarchy should *always* be released in their entirety before *any* unmanaged resources anywhere along the hierarchy chain.  Although somewhat rare, this may not be the case for derived classes.  I only bring this up because you're trying for a \"best practice\" approach...\n\nAs for the locking issue, this should really be done only on classes that are synchronized between threads.  The overhead of locking is somewhat small, but can quickly add up when using a lot of small classes.  This is more of a nit, but again, you are trying for a \"best practice\" type of implementation... ;-)\n\nThe other issue, of course, is that you should point out that subclasses which override the Free___Resources() methods should call base.Free___Resources() after doing their work but before returning, to make sure that base classes get a chance to clean their resources up too.","date":"2009-09-18T00:44:24.9212638+02:00"}
