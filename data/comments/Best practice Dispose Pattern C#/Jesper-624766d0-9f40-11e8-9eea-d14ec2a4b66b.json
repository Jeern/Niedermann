{"_id":"624766d0-9f40-11e8-9eea-d14ec2a4b66b","name":"Jesper","email":"ad62b4d7c02afdc2eb85410979c71283","body":"Hi Anonymous C :O)\n\nI could consider switching the freeing of managed and unmanaged resources, but on the other hand the freeing of managed resources is really, about freeing unmanaged resources. So in the pattern I have described unmanaged resources will be freed in refered classes first, and in the \"top\" class last. If I switch the statements it will be the other way around. Will any of these be fool proof ? I guess I will have to give it some thought.\n\nAbout the locking comment. One size fits all is not always good that is true. So you could remove the lock statement when you are sure it is not needed, or rather when performance demands it. I mean when can you really be sure that your class will never at some point in the future be part of a multithreaded scenario :O)\n\nYou are right I should have pointed out that one should call base.Free...() last in derived classes.","date":"2009-09-19T08:56:10.0818455+02:00"}
