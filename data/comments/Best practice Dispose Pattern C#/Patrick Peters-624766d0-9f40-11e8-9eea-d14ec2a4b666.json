{"_id":"624766d0-9f40-11e8-9eea-d14ec2a4b666","name":"Patrick Peters","email":"5EE0A381449DC09A00A0F9F3E6105F97","body":"Hi Jesper,\n\nI think this code sample needs some changes. Microsoft has a template, but you have to consider some topics:\n\n- virtual (polymorphistic) mehods for releasing managed and unmanaged code should be called Dispose(bool disposed)\n- keep releasing methods for unmanaged and managed code(like \"FreeManagedResources\" and \"FreeUnmanagedResources\") always private for the class itself, it is the responsibility of the class and not for derived classes\n- a finalizer is expensive to introduce. You only need them when the class holds unmanaged resources to be sure that unmanaged resources are always cleaned up by the GC.\n- [MethodImpl(MethodImplOptions.Synchronized)] is not needed by default.\n- use camelCasing in stead of m_ for class fields (this is Microsoft's default), but that's just code style.","date":"2009-06-22T07:43:06.4375408+02:00"}


